// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\repository\interface\user.go

// Package mockRepository is a generated GoMock package.
package mockRepository

import (
	domain "Zhooze/pkg/domain"
	models "Zhooze/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepository) AddAddress(userID int, address models.AddressInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", userID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepositoryMockRecorder) AddAddress(userID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepository)(nil).AddAddress), userID, address)
}

// AddressDetails mocks base method.
func (m *MockUserRepository) AddressDetails(addressID int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressDetails", addressID)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressDetails indicates an expected call of AddressDetails.
func (mr *MockUserRepositoryMockRecorder) AddressDetails(addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressDetails", reflect.TypeOf((*MockUserRepository)(nil).AddressDetails), addressID)
}

// AddressExistInUserProfile mocks base method.
func (m *MockUserRepository) AddressExistInUserProfile(addressID, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExistInUserProfile", addressID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressExistInUserProfile indicates an expected call of AddressExistInUserProfile.
func (mr *MockUserRepositoryMockRecorder) AddressExistInUserProfile(addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExistInUserProfile", reflect.TypeOf((*MockUserRepository)(nil).AddressExistInUserProfile), addressID, userID)
}

// ChangePassword mocks base method.
func (m *MockUserRepository) ChangePassword(id int, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserRepositoryMockRecorder) ChangePassword(id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserRepository)(nil).ChangePassword), id, password)
}

// CheckAddressAvailabilityWithAddressID mocks base method.
func (m *MockUserRepository) CheckAddressAvailabilityWithAddressID(addressID, userID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAddressAvailabilityWithAddressID", addressID, userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAddressAvailabilityWithAddressID indicates an expected call of CheckAddressAvailabilityWithAddressID.
func (mr *MockUserRepositoryMockRecorder) CheckAddressAvailabilityWithAddressID(addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAddressAvailabilityWithAddressID", reflect.TypeOf((*MockUserRepository)(nil).CheckAddressAvailabilityWithAddressID), addressID, userID)
}

// CheckUserAvailabilityWithUserID mocks base method.
func (m *MockUserRepository) CheckUserAvailabilityWithUserID(userID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserAvailabilityWithUserID", userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserAvailabilityWithUserID indicates an expected call of CheckUserAvailabilityWithUserID.
func (mr *MockUserRepositoryMockRecorder) CheckUserAvailabilityWithUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserAvailabilityWithUserID", reflect.TypeOf((*MockUserRepository)(nil).CheckUserAvailabilityWithUserID), userID)
}

// CheckUserExistsByEmail mocks base method.
func (m *MockUserRepository) CheckUserExistsByEmail(email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistsByEmail", email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistsByEmail indicates an expected call of CheckUserExistsByEmail.
func (mr *MockUserRepositoryMockRecorder) CheckUserExistsByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistsByEmail", reflect.TypeOf((*MockUserRepository)(nil).CheckUserExistsByEmail), email)
}

// CheckUserExistsByPhone mocks base method.
func (m *MockUserRepository) CheckUserExistsByPhone(phone string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistsByPhone", phone)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistsByPhone indicates an expected call of CheckUserExistsByPhone.
func (mr *MockUserRepositoryMockRecorder) CheckUserExistsByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistsByPhone", reflect.TypeOf((*MockUserRepository)(nil).CheckUserExistsByPhone), phone)
}

// CreateReferralEntry mocks base method.
func (m *MockUserRepository) CreateReferralEntry(userDetails models.UserDetailsResponse, userReferral string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferralEntry", userDetails, userReferral)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReferralEntry indicates an expected call of CreateReferralEntry.
func (mr *MockUserRepositoryMockRecorder) CreateReferralEntry(userDetails, userReferral interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferralEntry", reflect.TypeOf((*MockUserRepository)(nil).CreateReferralEntry), userDetails, userReferral)
}

// ExistStock mocks base method.
func (m *MockUserRepository) ExistStock(id, productID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistStock", id, productID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistStock indicates an expected call of ExistStock.
func (mr *MockUserRepositoryMockRecorder) ExistStock(id, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistStock", reflect.TypeOf((*MockUserRepository)(nil).ExistStock), id, productID)
}

// FindIdFromPhone mocks base method.
func (m *MockUserRepository) FindIdFromPhone(phone string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIdFromPhone", phone)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIdFromPhone indicates an expected call of FindIdFromPhone.
func (mr *MockUserRepositoryMockRecorder) FindIdFromPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIdFromPhone", reflect.TypeOf((*MockUserRepository)(nil).FindIdFromPhone), phone)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepository) FindUserByEmail(user models.LoginDetail) (models.UserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", user)
	ret0, _ := ret[0].(models.UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserByEmail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserByEmail), user)
}

// FindUserByMobileNumber mocks base method.
func (m *MockUserRepository) FindUserByMobileNumber(phone string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByMobileNumber", phone)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FindUserByMobileNumber indicates an expected call of FindUserByMobileNumber.
func (mr *MockUserRepositoryMockRecorder) FindUserByMobileNumber(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByMobileNumber", reflect.TypeOf((*MockUserRepository)(nil).FindUserByMobileNumber), phone)
}

// GetAllAddres mocks base method.
func (m *MockUserRepository) GetAllAddres(userId int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddres", userId)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddres indicates an expected call of GetAllAddres.
func (mr *MockUserRepositoryMockRecorder) GetAllAddres(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddres", reflect.TypeOf((*MockUserRepository)(nil).GetAllAddres), userId)
}

// GetAllAddress mocks base method.
func (m *MockUserRepository) GetAllAddress(userId int) ([]models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddress", userId)
	ret0, _ := ret[0].([]models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddress indicates an expected call of GetAllAddress.
func (mr *MockUserRepositoryMockRecorder) GetAllAddress(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddress", reflect.TypeOf((*MockUserRepository)(nil).GetAllAddress), userId)
}

// GetPassword mocks base method.
func (m *MockUserRepository) GetPassword(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockUserRepositoryMockRecorder) GetPassword(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockUserRepository)(nil).GetPassword), id)
}

// GetReferralAndTotalAmount mocks base method.
func (m *MockUserRepository) GetReferralAndTotalAmount(userID int) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralAndTotalAmount", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReferralAndTotalAmount indicates an expected call of GetReferralAndTotalAmount.
func (mr *MockUserRepositoryMockRecorder) GetReferralAndTotalAmount(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralAndTotalAmount", reflect.TypeOf((*MockUserRepository)(nil).GetReferralAndTotalAmount), userID)
}

// GetUserIdFromReferrals mocks base method.
func (m *MockUserRepository) GetUserIdFromReferrals(ReferralCode string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdFromReferrals", ReferralCode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdFromReferrals indicates an expected call of GetUserIdFromReferrals.
func (mr *MockUserRepositoryMockRecorder) GetUserIdFromReferrals(ReferralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdFromReferrals", reflect.TypeOf((*MockUserRepository)(nil).GetUserIdFromReferrals), ReferralCode)
}

// ProductExistCart mocks base method.
func (m *MockUserRepository) ProductExistCart(userID, productID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductExistCart", userID, productID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductExistCart indicates an expected call of ProductExistCart.
func (mr *MockUserRepositoryMockRecorder) ProductExistCart(userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductExistCart", reflect.TypeOf((*MockUserRepository)(nil).ProductExistCart), userID, productID)
}

// ProductStock mocks base method.
func (m *MockUserRepository) ProductStock(productID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductStock", productID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductStock indicates an expected call of ProductStock.
func (mr *MockUserRepositoryMockRecorder) ProductStock(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductStock", reflect.TypeOf((*MockUserRepository)(nil).ProductStock), productID)
}

// RemoveFromUserProfile mocks base method.
func (m *MockUserRepository) RemoveFromUserProfile(userID, addressID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromUserProfile", userID, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromUserProfile indicates an expected call of RemoveFromUserProfile.
func (mr *MockUserRepositoryMockRecorder) RemoveFromUserProfile(userID, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromUserProfile", reflect.TypeOf((*MockUserRepository)(nil).RemoveFromUserProfile), userID, addressID)
}

// UpdateCity mocks base method.
func (m *MockUserRepository) UpdateCity(city string, addressID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCity", city, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCity indicates an expected call of UpdateCity.
func (mr *MockUserRepositoryMockRecorder) UpdateCity(city, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCity", reflect.TypeOf((*MockUserRepository)(nil).UpdateCity), city, addressID)
}

// UpdateFirstName mocks base method.
func (m *MockUserRepository) UpdateFirstName(name string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFirstName", name, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFirstName indicates an expected call of UpdateFirstName.
func (mr *MockUserRepositoryMockRecorder) UpdateFirstName(name, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirstName", reflect.TypeOf((*MockUserRepository)(nil).UpdateFirstName), name, userID)
}

// UpdateHouseName mocks base method.
func (m *MockUserRepository) UpdateHouseName(HouseName string, addressID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHouseName", HouseName, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHouseName indicates an expected call of UpdateHouseName.
func (mr *MockUserRepositoryMockRecorder) UpdateHouseName(HouseName, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHouseName", reflect.TypeOf((*MockUserRepository)(nil).UpdateHouseName), HouseName, addressID)
}

// UpdateLastName mocks base method.
func (m *MockUserRepository) UpdateLastName(name string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastName", name, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastName indicates an expected call of UpdateLastName.
func (mr *MockUserRepositoryMockRecorder) UpdateLastName(name, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastName", reflect.TypeOf((*MockUserRepository)(nil).UpdateLastName), name, userID)
}

// UpdateName mocks base method.
func (m *MockUserRepository) UpdateName(name string, addressID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", name, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockUserRepositoryMockRecorder) UpdateName(name, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockUserRepository)(nil).UpdateName), name, addressID)
}

// UpdatePin mocks base method.
func (m *MockUserRepository) UpdatePin(pin string, addressID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePin", pin, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePin indicates an expected call of UpdatePin.
func (mr *MockUserRepositoryMockRecorder) UpdatePin(pin, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePin", reflect.TypeOf((*MockUserRepository)(nil).UpdatePin), pin, addressID)
}

// UpdateQuantityAdd mocks base method.
func (m *MockUserRepository) UpdateQuantityAdd(id, prdt_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantityAdd", id, prdt_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantityAdd indicates an expected call of UpdateQuantityAdd.
func (mr *MockUserRepositoryMockRecorder) UpdateQuantityAdd(id, prdt_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantityAdd", reflect.TypeOf((*MockUserRepository)(nil).UpdateQuantityAdd), id, prdt_id)
}

// UpdateQuantityless mocks base method.
func (m *MockUserRepository) UpdateQuantityless(id, prdt_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantityless", id, prdt_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantityless indicates an expected call of UpdateQuantityless.
func (mr *MockUserRepositoryMockRecorder) UpdateQuantityless(id, prdt_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantityless", reflect.TypeOf((*MockUserRepository)(nil).UpdateQuantityless), id, prdt_id)
}

// UpdateReferralAmount mocks base method.
func (m *MockUserRepository) UpdateReferralAmount(referralAmount float64, referredUserId, currentUserID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReferralAmount", referralAmount, referredUserId, currentUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReferralAmount indicates an expected call of UpdateReferralAmount.
func (mr *MockUserRepositoryMockRecorder) UpdateReferralAmount(referralAmount, referredUserId, currentUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferralAmount", reflect.TypeOf((*MockUserRepository)(nil).UpdateReferralAmount), referralAmount, referredUserId, currentUserID)
}

// UpdateSomethingBasedOnUserID mocks base method.
func (m *MockUserRepository) UpdateSomethingBasedOnUserID(tableName, columnName string, updateValue float64, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSomethingBasedOnUserID", tableName, columnName, updateValue, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSomethingBasedOnUserID indicates an expected call of UpdateSomethingBasedOnUserID.
func (mr *MockUserRepositoryMockRecorder) UpdateSomethingBasedOnUserID(tableName, columnName, updateValue, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSomethingBasedOnUserID", reflect.TypeOf((*MockUserRepository)(nil).UpdateSomethingBasedOnUserID), tableName, columnName, updateValue, userID)
}

// UpdateState mocks base method.
func (m *MockUserRepository) UpdateState(state string, addressID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", state, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockUserRepositoryMockRecorder) UpdateState(state, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockUserRepository)(nil).UpdateState), state, addressID)
}

// UpdateStreet mocks base method.
func (m *MockUserRepository) UpdateStreet(street string, addressID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreet", street, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStreet indicates an expected call of UpdateStreet.
func (mr *MockUserRepositoryMockRecorder) UpdateStreet(street, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreet", reflect.TypeOf((*MockUserRepository)(nil).UpdateStreet), street, addressID)
}

// UpdateTotalPrice mocks base method.
func (m *MockUserRepository) UpdateTotalPrice(ID, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTotalPrice", ID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTotalPrice indicates an expected call of UpdateTotalPrice.
func (mr *MockUserRepositoryMockRecorder) UpdateTotalPrice(ID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTotalPrice", reflect.TypeOf((*MockUserRepository)(nil).UpdateTotalPrice), ID, productID)
}

// UpdateUserEmail mocks base method.
func (m *MockUserRepository) UpdateUserEmail(email string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", email, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockUserRepositoryMockRecorder) UpdateUserEmail(email, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserEmail), email, userID)
}

// UpdateUserPhone mocks base method.
func (m *MockUserRepository) UpdateUserPhone(phone string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhone", phone, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPhone indicates an expected call of UpdateUserPhone.
func (mr *MockUserRepositoryMockRecorder) UpdateUserPhone(phone, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhone", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserPhone), phone, userID)
}

// UserDetails mocks base method.
func (m *MockUserRepository) UserDetails(userID int) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetails", userID)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetails indicates an expected call of UserDetails.
func (mr *MockUserRepositoryMockRecorder) UserDetails(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetails", reflect.TypeOf((*MockUserRepository)(nil).UserDetails), userID)
}

// UserSignUp mocks base method.
func (m *MockUserRepository) UserSignUp(user models.UserSignUp) (models.UserDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", user)
	ret0, _ := ret[0].(models.UserDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserRepositoryMockRecorder) UserSignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserRepository)(nil).UserSignUp), user)
}
