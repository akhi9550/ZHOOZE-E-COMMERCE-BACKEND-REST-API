// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\repository\interface\order.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "Zhooze/pkg/domain"
	models "Zhooze/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddAmountToOrder mocks base method.
func (m *MockOrderRepository) AddAmountToOrder(Price float64, orderID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAmountToOrder", Price, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAmountToOrder indicates an expected call of AddAmountToOrder.
func (mr *MockOrderRepositoryMockRecorder) AddAmountToOrder(Price, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAmountToOrder", reflect.TypeOf((*MockOrderRepository)(nil).AddAmountToOrder), Price, orderID)
}

// AddOrderProducts mocks base method.
func (m *MockOrderRepository) AddOrderProducts(order_id int, cart []models.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderProducts", order_id, cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrderProducts indicates an expected call of AddOrderProducts.
func (mr *MockOrderRepositoryMockRecorder) AddOrderProducts(order_id, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderProducts", reflect.TypeOf((*MockOrderRepository)(nil).AddOrderProducts), order_id, cart)
}

// AddpaymentMethod mocks base method.
func (m *MockOrderRepository) AddpaymentMethod(paymentID int, orderID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddpaymentMethod", paymentID, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddpaymentMethod indicates an expected call of AddpaymentMethod.
func (mr *MockOrderRepositoryMockRecorder) AddpaymentMethod(paymentID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddpaymentMethod", reflect.TypeOf((*MockOrderRepository)(nil).AddpaymentMethod), paymentID, orderID)
}

// AddressExist mocks base method.
func (m *MockOrderRepository) AddressExist(orderBody models.OrderIncoming) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExist", orderBody)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressExist indicates an expected call of AddressExist.
func (mr *MockOrderRepositoryMockRecorder) AddressExist(orderBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExist", reflect.TypeOf((*MockOrderRepository)(nil).AddressExist), orderBody)
}

// ApproveOrder mocks base method.
func (m *MockOrderRepository) ApproveOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveOrder indicates an expected call of ApproveOrder.
func (mr *MockOrderRepositoryMockRecorder) ApproveOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveOrder", reflect.TypeOf((*MockOrderRepository)(nil).ApproveOrder), orderID)
}

// CancelOrders mocks base method.
func (m *MockOrderRepository) CancelOrders(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrders", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrders indicates an expected call of CancelOrders.
func (mr *MockOrderRepositoryMockRecorder) CancelOrders(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrders", reflect.TypeOf((*MockOrderRepository)(nil).CancelOrders), orderID)
}

// CartEmpty mocks base method.
func (m *MockOrderRepository) CartEmpty(cartID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CartEmpty", cartID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CartEmpty indicates an expected call of CartEmpty.
func (mr *MockOrderRepositoryMockRecorder) CartEmpty(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CartEmpty", reflect.TypeOf((*MockOrderRepository)(nil).CartEmpty), cartID)
}

// CheckAddressAvailabilityWithID mocks base method.
func (m *MockOrderRepository) CheckAddressAvailabilityWithID(addressID, userID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAddressAvailabilityWithID", addressID, userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAddressAvailabilityWithID indicates an expected call of CheckAddressAvailabilityWithID.
func (mr *MockOrderRepositoryMockRecorder) CheckAddressAvailabilityWithID(addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAddressAvailabilityWithID", reflect.TypeOf((*MockOrderRepository)(nil).CheckAddressAvailabilityWithID), addressID, userID)
}

// CheckCartAvailabilityWithID mocks base method.
func (m *MockOrderRepository) CheckCartAvailabilityWithID(cartID, UserID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCartAvailabilityWithID", cartID, UserID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckCartAvailabilityWithID indicates an expected call of CheckCartAvailabilityWithID.
func (mr *MockOrderRepositoryMockRecorder) CheckCartAvailabilityWithID(cartID, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCartAvailabilityWithID", reflect.TypeOf((*MockOrderRepository)(nil).CheckCartAvailabilityWithID), cartID, UserID)
}

// CheckOrderID mocks base method.
func (m *MockOrderRepository) CheckOrderID(orderId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderID", orderId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrderID indicates an expected call of CheckOrderID.
func (mr *MockOrderRepositoryMockRecorder) CheckOrderID(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderID", reflect.TypeOf((*MockOrderRepository)(nil).CheckOrderID), orderId)
}

// DoesCartExist mocks base method.
func (m *MockOrderRepository) DoesCartExist(userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesCartExist", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesCartExist indicates an expected call of DoesCartExist.
func (mr *MockOrderRepositoryMockRecorder) DoesCartExist(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesCartExist", reflect.TypeOf((*MockOrderRepository)(nil).DoesCartExist), userID)
}

// FindCartQuantity mocks base method.
func (m *MockOrderRepository) FindCartQuantity(cart_id, product_id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartQuantity", cart_id, product_id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartQuantity indicates an expected call of FindCartQuantity.
func (mr *MockOrderRepositoryMockRecorder) FindCartQuantity(cart_id, product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartQuantity", reflect.TypeOf((*MockOrderRepository)(nil).FindCartQuantity), cart_id, product_id)
}

// FindOrderStock mocks base method.
func (m *MockOrderRepository) FindOrderStock(cartID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderStock", cartID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderStock indicates an expected call of FindOrderStock.
func (mr *MockOrderRepositoryMockRecorder) FindOrderStock(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderStock", reflect.TypeOf((*MockOrderRepository)(nil).FindOrderStock), cartID)
}

// FindPrice mocks base method.
func (m *MockOrderRepository) FindPrice(product_id int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrice", product_id)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrice indicates an expected call of FindPrice.
func (mr *MockOrderRepositoryMockRecorder) FindPrice(product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrice", reflect.TypeOf((*MockOrderRepository)(nil).FindPrice), product_id)
}

// FindProductFromCart mocks base method.
func (m *MockOrderRepository) FindProductFromCart(cartID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductFromCart", cartID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductFromCart indicates an expected call of FindProductFromCart.
func (mr *MockOrderRepositoryMockRecorder) FindProductFromCart(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductFromCart", reflect.TypeOf((*MockOrderRepository)(nil).FindProductFromCart), cartID)
}

// FindProductNames mocks base method.
func (m *MockOrderRepository) FindProductNames(product_id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductNames", product_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductNames indicates an expected call of FindProductNames.
func (mr *MockOrderRepositoryMockRecorder) FindProductNames(product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductNames", reflect.TypeOf((*MockOrderRepository)(nil).FindProductNames), product_id)
}

// FindStock mocks base method.
func (m *MockOrderRepository) FindStock(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStock", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStock indicates an expected call of FindStock.
func (mr *MockOrderRepositoryMockRecorder) FindStock(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStock", reflect.TypeOf((*MockOrderRepository)(nil).FindStock), id)
}

// GetAddressFromOrderId mocks base method.
func (m *MockOrderRepository) GetAddressFromOrderId(orderID int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressFromOrderId", orderID)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressFromOrderId indicates an expected call of GetAddressFromOrderId.
func (mr *MockOrderRepositoryMockRecorder) GetAddressFromOrderId(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressFromOrderId", reflect.TypeOf((*MockOrderRepository)(nil).GetAddressFromOrderId), orderID)
}

// GetAllAddresses mocks base method.
func (m *MockOrderRepository) GetAllAddresses(userID int) ([]models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddresses", userID)
	ret0, _ := ret[0].([]models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddresses indicates an expected call of GetAllAddresses.
func (mr *MockOrderRepositoryMockRecorder) GetAllAddresses(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddresses", reflect.TypeOf((*MockOrderRepository)(nil).GetAllAddresses), userID)
}

// GetAllOrderDetailsBrief mocks base method.
func (m *MockOrderRepository) GetAllOrderDetailsBrief(page, count int) ([]models.CombinedOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderDetailsBrief", page, count)
	ret0, _ := ret[0].([]models.CombinedOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderDetailsBrief indicates an expected call of GetAllOrderDetailsBrief.
func (mr *MockOrderRepositoryMockRecorder) GetAllOrderDetailsBrief(page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderDetailsBrief", reflect.TypeOf((*MockOrderRepository)(nil).GetAllOrderDetailsBrief), page, count)
}

// GetAllPaymentOption mocks base method.
func (m *MockOrderRepository) GetAllPaymentOption() ([]models.PaymentDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaymentOption")
	ret0, _ := ret[0].([]models.PaymentDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaymentOption indicates an expected call of GetAllPaymentOption.
func (mr *MockOrderRepositoryMockRecorder) GetAllPaymentOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaymentOption", reflect.TypeOf((*MockOrderRepository)(nil).GetAllPaymentOption))
}

// GetBriefOrderDetails mocks base method.
func (m *MockOrderRepository) GetBriefOrderDetails(orderID int) (domain.OrderSuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBriefOrderDetails", orderID)
	ret0, _ := ret[0].(domain.OrderSuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBriefOrderDetails indicates an expected call of GetBriefOrderDetails.
func (mr *MockOrderRepositoryMockRecorder) GetBriefOrderDetails(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBriefOrderDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetBriefOrderDetails), orderID)
}

// GetCouponDiscountPrice mocks base method.
func (m *MockOrderRepository) GetCouponDiscountPrice(UserID int, Total float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponDiscountPrice", UserID, Total)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponDiscountPrice indicates an expected call of GetCouponDiscountPrice.
func (mr *MockOrderRepositoryMockRecorder) GetCouponDiscountPrice(UserID, Total interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponDiscountPrice", reflect.TypeOf((*MockOrderRepository)(nil).GetCouponDiscountPrice), UserID, Total)
}

// GetDetailedOrderThroughId mocks base method.
func (m *MockOrderRepository) GetDetailedOrderThroughId(orderId int) (models.CombinedOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailedOrderThroughId", orderId)
	ret0, _ := ret[0].(models.CombinedOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailedOrderThroughId indicates an expected call of GetDetailedOrderThroughId.
func (mr *MockOrderRepositoryMockRecorder) GetDetailedOrderThroughId(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailedOrderThroughId", reflect.TypeOf((*MockOrderRepository)(nil).GetDetailedOrderThroughId), orderId)
}

// GetItemsByOrderId mocks base method.
func (m *MockOrderRepository) GetItemsByOrderId(orderId int) ([]models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByOrderId", orderId)
	ret0, _ := ret[0].([]models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByOrderId indicates an expected call of GetItemsByOrderId.
func (mr *MockOrderRepositoryMockRecorder) GetItemsByOrderId(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByOrderId", reflect.TypeOf((*MockOrderRepository)(nil).GetItemsByOrderId), orderId)
}

// GetOrder mocks base method.
func (m *MockOrderRepository) GetOrder(orderID int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderID)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderRepositoryMockRecorder) GetOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetOrder), orderID)
}

// GetOrderDetail mocks base method.
func (m *MockOrderRepository) GetOrderDetail(orderId int) (models.OrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", orderId)
	ret0, _ := ret[0].(models.OrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetail(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetail), orderId)
}

// GetOrderDetailOfAproduct mocks base method.
func (m *MockOrderRepository) GetOrderDetailOfAproduct(orderID int) (models.OrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetailOfAproduct", orderID)
	ret0, _ := ret[0].(models.OrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetailOfAproduct indicates an expected call of GetOrderDetailOfAproduct.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetailOfAproduct(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetailOfAproduct", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetailOfAproduct), orderID)
}

// GetOrderDetails mocks base method.
func (m *MockOrderRepository) GetOrderDetails(userId, page, count int) ([]models.FullOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetails", userId, page, count)
	ret0, _ := ret[0].([]models.FullOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetails indicates an expected call of GetOrderDetails.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetails(userId, page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetails), userId, page, count)
}

// GetOrderDetailsByOrderId mocks base method.
func (m *MockOrderRepository) GetOrderDetailsByOrderId(orderID int) (models.CombinedOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetailsByOrderId", orderID)
	ret0, _ := ret[0].(models.CombinedOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetailsByOrderId indicates an expected call of GetOrderDetailsByOrderId.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetailsByOrderId(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetailsByOrderId", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetailsByOrderId), orderID)
}

// GetPaymentId mocks base method.
func (m *MockOrderRepository) GetPaymentId(paymentID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentId", paymentID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetPaymentId indicates an expected call of GetPaymentId.
func (mr *MockOrderRepositoryMockRecorder) GetPaymentId(paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentId", reflect.TypeOf((*MockOrderRepository)(nil).GetPaymentId), paymentID)
}

// GetProductDetailsFromOrders mocks base method.
func (m *MockOrderRepository) GetProductDetailsFromOrders(orderID int) ([]models.OrderProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductDetailsFromOrders", orderID)
	ret0, _ := ret[0].([]models.OrderProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetailsFromOrders indicates an expected call of GetProductDetailsFromOrders.
func (mr *MockOrderRepositoryMockRecorder) GetProductDetailsFromOrders(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetailsFromOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetProductDetailsFromOrders), orderID)
}

// GetProductsInCart mocks base method.
func (m *MockOrderRepository) GetProductsInCart(cart_id int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsInCart", cart_id)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsInCart indicates an expected call of GetProductsInCart.
func (mr *MockOrderRepositoryMockRecorder) GetProductsInCart(cart_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsInCart", reflect.TypeOf((*MockOrderRepository)(nil).GetProductsInCart), cart_id)
}

// GetShipmentStatus mocks base method.
func (m *MockOrderRepository) GetShipmentStatus(orderID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShipmentStatus", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShipmentStatus indicates an expected call of GetShipmentStatus.
func (mr *MockOrderRepositoryMockRecorder) GetShipmentStatus(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShipmentStatus", reflect.TypeOf((*MockOrderRepository)(nil).GetShipmentStatus), orderID)
}

// OrderExist mocks base method.
func (m *MockOrderRepository) OrderExist(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderExist", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderExist indicates an expected call of OrderExist.
func (mr *MockOrderRepositoryMockRecorder) OrderExist(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderExist", reflect.TypeOf((*MockOrderRepository)(nil).OrderExist), orderID)
}

// OrderItems mocks base method.
func (m *MockOrderRepository) OrderItems(ob models.OrderIncoming, price float64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderItems", ob, price)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderItems indicates an expected call of OrderItems.
func (mr *MockOrderRepositoryMockRecorder) OrderItems(ob, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderItems", reflect.TypeOf((*MockOrderRepository)(nil).OrderItems), ob, price)
}

// PaymentAlreadyPaid mocks base method.
func (m *MockOrderRepository) PaymentAlreadyPaid(orderID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentAlreadyPaid", orderID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentAlreadyPaid indicates an expected call of PaymentAlreadyPaid.
func (mr *MockOrderRepositoryMockRecorder) PaymentAlreadyPaid(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentAlreadyPaid", reflect.TypeOf((*MockOrderRepository)(nil).PaymentAlreadyPaid), orderID)
}

// PaymentExist mocks base method.
func (m *MockOrderRepository) PaymentExist(orderBody models.OrderIncoming) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentExist", orderBody)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentExist indicates an expected call of PaymentExist.
func (mr *MockOrderRepositoryMockRecorder) PaymentExist(orderBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentExist", reflect.TypeOf((*MockOrderRepository)(nil).PaymentExist), orderBody)
}

// PaymentMethodID mocks base method.
func (m *MockOrderRepository) PaymentMethodID(orderID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentMethodID", orderID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentMethodID indicates an expected call of PaymentMethodID.
func (mr *MockOrderRepositoryMockRecorder) PaymentMethodID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentMethodID", reflect.TypeOf((*MockOrderRepository)(nil).PaymentMethodID), orderID)
}

// PaymentStatus mocks base method.
func (m *MockOrderRepository) PaymentStatus(orderID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentStatus", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentStatus indicates an expected call of PaymentStatus.
func (mr *MockOrderRepositoryMockRecorder) PaymentStatus(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentStatus", reflect.TypeOf((*MockOrderRepository)(nil).PaymentStatus), orderID)
}

// ProductStockMinus mocks base method.
func (m *MockOrderRepository) ProductStockMinus(productID, stock int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductStockMinus", productID, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductStockMinus indicates an expected call of ProductStockMinus.
func (mr *MockOrderRepositoryMockRecorder) ProductStockMinus(productID, stock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductStockMinus", reflect.TypeOf((*MockOrderRepository)(nil).ProductStockMinus), productID, stock)
}

// TotalAmountFromOrder mocks base method.
func (m *MockOrderRepository) TotalAmountFromOrder(orderID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalAmountFromOrder", orderID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalAmountFromOrder indicates an expected call of TotalAmountFromOrder.
func (mr *MockOrderRepositoryMockRecorder) TotalAmountFromOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalAmountFromOrder", reflect.TypeOf((*MockOrderRepository)(nil).TotalAmountFromOrder), orderID)
}

// TotalAmountInCart mocks base method.
func (m *MockOrderRepository) TotalAmountInCart(userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalAmountInCart", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalAmountInCart indicates an expected call of TotalAmountInCart.
func (mr *MockOrderRepositoryMockRecorder) TotalAmountInCart(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalAmountInCart", reflect.TypeOf((*MockOrderRepository)(nil).TotalAmountInCart), userID)
}

// UpdateAmountToWallet mocks base method.
func (m *MockOrderRepository) UpdateAmountToWallet(userID int, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAmountToWallet", userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAmountToWallet indicates an expected call of UpdateAmountToWallet.
func (mr *MockOrderRepositoryMockRecorder) UpdateAmountToWallet(userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAmountToWallet", reflect.TypeOf((*MockOrderRepository)(nil).UpdateAmountToWallet), userID, amount)
}

// UpdateCartAfterOrder mocks base method.
func (m *MockOrderRepository) UpdateCartAfterOrder(userID, productID int, quantity float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartAfterOrder", userID, productID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartAfterOrder indicates an expected call of UpdateCartAfterOrder.
func (mr *MockOrderRepositoryMockRecorder) UpdateCartAfterOrder(userID, productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartAfterOrder", reflect.TypeOf((*MockOrderRepository)(nil).UpdateCartAfterOrder), userID, productID, quantity)
}

// UpdateCouponDetails mocks base method.
func (m *MockOrderRepository) UpdateCouponDetails(discount_price float64, UserID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCouponDetails", discount_price, UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCouponDetails indicates an expected call of UpdateCouponDetails.
func (mr *MockOrderRepositoryMockRecorder) UpdateCouponDetails(discount_price, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCouponDetails", reflect.TypeOf((*MockOrderRepository)(nil).UpdateCouponDetails), discount_price, UserID)
}

// UpdateHistory mocks base method.
func (m *MockOrderRepository) UpdateHistory(userID, orderID int, amount float64, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHistory", userID, orderID, amount, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHistory indicates an expected call of UpdateHistory.
func (mr *MockOrderRepositoryMockRecorder) UpdateHistory(userID, orderID, amount, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHistory", reflect.TypeOf((*MockOrderRepository)(nil).UpdateHistory), userID, orderID, amount, reason)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepository) UpdateOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrder), orderID)
}

// UpdateQuantityOfProduct mocks base method.
func (m *MockOrderRepository) UpdateQuantityOfProduct(orderProducts []models.OrderProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantityOfProduct", orderProducts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantityOfProduct indicates an expected call of UpdateQuantityOfProduct.
func (mr *MockOrderRepositoryMockRecorder) UpdateQuantityOfProduct(orderProducts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantityOfProduct", reflect.TypeOf((*MockOrderRepository)(nil).UpdateQuantityOfProduct), orderProducts)
}

// UpdateStockOfProduct mocks base method.
func (m *MockOrderRepository) UpdateStockOfProduct(orderProducts []models.OrderProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStockOfProduct", orderProducts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStockOfProduct indicates an expected call of UpdateStockOfProduct.
func (mr *MockOrderRepositoryMockRecorder) UpdateStockOfProduct(orderProducts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStockOfProduct", reflect.TypeOf((*MockOrderRepository)(nil).UpdateStockOfProduct), orderProducts)
}

// UserIDFromOrder mocks base method.
func (m *MockOrderRepository) UserIDFromOrder(orderID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserIDFromOrder", orderID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserIDFromOrder indicates an expected call of UserIDFromOrder.
func (mr *MockOrderRepositoryMockRecorder) UserIDFromOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserIDFromOrder", reflect.TypeOf((*MockOrderRepository)(nil).UserIDFromOrder), orderID)
}

// UserOrderRelationship mocks base method.
func (m *MockOrderRepository) UserOrderRelationship(orderID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrderRelationship", orderID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOrderRelationship indicates an expected call of UserOrderRelationship.
func (mr *MockOrderRepositoryMockRecorder) UserOrderRelationship(orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrderRelationship", reflect.TypeOf((*MockOrderRepository)(nil).UserOrderRelationship), orderID, userID)
}
