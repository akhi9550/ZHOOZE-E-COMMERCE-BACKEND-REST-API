// Code generated by MockGen. DO NOT EDIT.
// Source: pkg\usecase\interface\user.go

// Package mock is a generated GoMock package.
package mock

import (
	models "Zhooze/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(userID int, address models.AddressInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", userID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(userID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), userID, address)
}

// ApplyReferral mocks base method.
func (m *MockUserUseCase) ApplyReferral(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyReferral", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyReferral indicates an expected call of ApplyReferral.
func (mr *MockUserUseCaseMockRecorder) ApplyReferral(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyReferral", reflect.TypeOf((*MockUserUseCase)(nil).ApplyReferral), userID)
}

// ChangePassword mocks base method.
func (m *MockUserUseCase) ChangePassword(id int, old, password, repassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, old, password, repassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserUseCaseMockRecorder) ChangePassword(id, old, password, repassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserUseCase)(nil).ChangePassword), id, old, password, repassword)
}

// DeleteAddress mocks base method.
func (m *MockUserUseCase) DeleteAddress(addressID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", addressID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserUseCaseMockRecorder) DeleteAddress(addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserUseCase)(nil).DeleteAddress), addressID, userID)
}

// ForgotPasswordSend mocks base method.
func (m *MockUserUseCase) ForgotPasswordSend(phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPasswordSend", phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPasswordSend indicates an expected call of ForgotPasswordSend.
func (mr *MockUserUseCaseMockRecorder) ForgotPasswordSend(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPasswordSend", reflect.TypeOf((*MockUserUseCase)(nil).ForgotPasswordSend), phone)
}

// ForgotPasswordVerifyAndChange mocks base method.
func (m *MockUserUseCase) ForgotPasswordVerifyAndChange(model models.ForgotVerify) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPasswordVerifyAndChange", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPasswordVerifyAndChange indicates an expected call of ForgotPasswordVerifyAndChange.
func (mr *MockUserUseCaseMockRecorder) ForgotPasswordVerifyAndChange(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPasswordVerifyAndChange", reflect.TypeOf((*MockUserUseCase)(nil).ForgotPasswordVerifyAndChange), model)
}

// GetAllAddres mocks base method.
func (m *MockUserUseCase) GetAllAddres(userId int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddres", userId)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddres indicates an expected call of GetAllAddres.
func (mr *MockUserUseCaseMockRecorder) GetAllAddres(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddres", reflect.TypeOf((*MockUserUseCase)(nil).GetAllAddres), userId)
}

// GetAllAddress mocks base method.
func (m *MockUserUseCase) GetAllAddress(userId int) ([]models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddress", userId)
	ret0, _ := ret[0].([]models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddress indicates an expected call of GetAllAddress.
func (mr *MockUserUseCaseMockRecorder) GetAllAddress(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddress", reflect.TypeOf((*MockUserUseCase)(nil).GetAllAddress), userId)
}

// GetCart mocks base method.
func (m *MockUserUseCase) GetCart(id, cart_id int) (models.GetCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", id, cart_id)
	ret0, _ := ret[0].(models.GetCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockUserUseCaseMockRecorder) GetCart(id, cart_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockUserUseCase)(nil).GetCart), id, cart_id)
}

// UpdateAddress mocks base method.
func (m *MockUserUseCase) UpdateAddress(addressDetails models.AddressInfo, addressID, userID int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", addressDetails, addressID, userID)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserUseCaseMockRecorder) UpdateAddress(addressDetails, addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserUseCase)(nil).UpdateAddress), addressDetails, addressID, userID)
}

// UpdateQuantityAdd mocks base method.
func (m *MockUserUseCase) UpdateQuantityAdd(id, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantityAdd", id, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantityAdd indicates an expected call of UpdateQuantityAdd.
func (mr *MockUserUseCaseMockRecorder) UpdateQuantityAdd(id, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantityAdd", reflect.TypeOf((*MockUserUseCase)(nil).UpdateQuantityAdd), id, productID)
}

// UpdateQuantityless mocks base method.
func (m *MockUserUseCase) UpdateQuantityless(id, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantityless", id, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantityless indicates an expected call of UpdateQuantityless.
func (mr *MockUserUseCaseMockRecorder) UpdateQuantityless(id, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantityless", reflect.TypeOf((*MockUserUseCase)(nil).UpdateQuantityless), id, productID)
}

// UpdateUserDetails mocks base method.
func (m *MockUserUseCase) UpdateUserDetails(userDetails models.UsersProfileDetails, userID int) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetails", userDetails, userID)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockUserUseCaseMockRecorder) UpdateUserDetails(userDetails, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockUserUseCase)(nil).UpdateUserDetails), userDetails, userID)
}

// UserDetails mocks base method.
func (m *MockUserUseCase) UserDetails(userID int) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetails", userID)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetails indicates an expected call of UserDetails.
func (mr *MockUserUseCaseMockRecorder) UserDetails(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetails", reflect.TypeOf((*MockUserUseCase)(nil).UserDetails), userID)
}

// UsersLogin mocks base method.
func (m *MockUserUseCase) UsersLogin(user models.LoginDetail) (*models.TokenUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersLogin", user)
	ret0, _ := ret[0].(*models.TokenUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersLogin indicates an expected call of UsersLogin.
func (mr *MockUserUseCaseMockRecorder) UsersLogin(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersLogin", reflect.TypeOf((*MockUserUseCase)(nil).UsersLogin), user)
}

// UsersSignUp mocks base method.
func (m *MockUserUseCase) UsersSignUp(user models.UserSignUp) (*models.TokenUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersSignUp", user)
	ret0, _ := ret[0].(*models.TokenUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersSignUp indicates an expected call of UsersSignUp.
func (mr *MockUserUseCaseMockRecorder) UsersSignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersSignUp", reflect.TypeOf((*MockUserUseCase)(nil).UsersSignUp), user)
}
